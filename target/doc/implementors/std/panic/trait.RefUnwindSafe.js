(function() {var implementors = {};
implementors["csfml_audio_sys"] = [{"text":"impl RefUnwindSafe for sfMusic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSoundBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSoundBufferRecorder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSoundRecorder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSoundStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfTimeSpan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSoundStreamChunk","synthetic":true,"types":[]}];
implementors["csfml_graphics_sys"] = [{"text":"impl RefUnwindSafe for sfBlendMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfColor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfFloatRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfIntRect","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfCircleShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfConvexShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfFont","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfImage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfShader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfRectangleShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfRenderTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfRenderWindow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfShape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSprite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfText","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfTransformable","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVertexArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVertexBuffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfView","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfTransform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfFontInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlyph","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfRenderStates","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVertex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslBvec2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslIvec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslBvec3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslVec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslIvec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslBvec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslMat3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfGlslMat4","synthetic":true,"types":[]}];
implementors["csfml_system_sys"] = [{"text":"impl RefUnwindSafe for sfTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfClock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfMutex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfThread","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfInputStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVector2i","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVector2u","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVector2f","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVector3f","synthetic":true,"types":[]}];
implementors["csfml_window_sys"] = [{"text":"impl RefUnwindSafe for sfContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfCursor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfWindow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfJoystickIdentification","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfKeyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfTextEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfMouseMoveEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfMouseButtonEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfMouseWheelEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfMouseWheelScrollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfJoystickMoveEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfJoystickButtonEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfJoystickConnectEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSizeEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfTouchEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfSensorEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfVideoMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfContextSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for sfEvent","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformChar","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sfml"] = [{"text":"impl RefUnwindSafe for Music","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for Sound&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoundBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for SoundStreamPlayer&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpan","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoundStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for SoundRecorderDriver&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SoundBufferRecorder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetDeviceError","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for CircleShape&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for ConvexShape&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConvexShapePoints","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; !RefUnwindSafe for CustomShape&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Font","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Glyph","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Rect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for RectangleShape&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'texture, 'shader, 'shader_texture&gt; RefUnwindSafe for RenderStates&lt;'texture, 'shader, 'shader_texture&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderTexture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenderWindow","synthetic":true,"types":[]},{"text":"impl&lt;'texture&gt; RefUnwindSafe for Shader&lt;'texture&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for Sprite&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for Text&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Texture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Transform","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vertex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VertexArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Vertices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for View","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrimitiveType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BlendMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Factor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Equation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Vec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IVec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BVec4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mat3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mat4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Clock","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SfBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Vector2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Vector3&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContextSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VideoMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identification","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Button","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Wheel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]}];
implementors["widestring"] = [{"text":"impl&lt;C&gt; RefUnwindSafe for MissingNulError&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for UCStr&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for UCString&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for NulError&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromUtf32Error","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for UStr&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; RefUnwindSafe for UString&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()