(function() {var implementors = {};
implementors["getrandom"] = [{"text":"impl From&lt;NonZeroU32&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl&lt;X:&nbsp;SampleUniform&gt; From&lt;Range&lt;X&gt;&gt; for Uniform&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;SampleUniform&gt; From&lt;RangeInclusive&lt;X&gt;&gt; for Uniform&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;u32&gt;&gt; for IndexVec","synthetic":false,"types":[]},{"text":"impl From&lt;Vec&lt;usize&gt;&gt; for IndexVec","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl From&lt;ChaCha20Core&gt; for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl From&lt;ChaCha12Core&gt; for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl From&lt;ChaCha8Core&gt; for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl From&lt;NonZeroU32&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["sfml"] = [{"text":"impl From&lt;u32&gt; for Color","synthetic":false,"types":[]},{"text":"impl From&lt;Color&gt; for Vec4","synthetic":false,"types":[]},{"text":"impl From&lt;Color&gt; for IVec4","synthetic":false,"types":[]},{"text":"impl From&lt;Transform&gt; for Mat3","synthetic":false,"types":[]},{"text":"impl From&lt;Transform&gt; for Mat4","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;(T, T)&gt; for Vector2&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;(T, T, T)&gt; for Vector3&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;(u32, u32)&gt; for VideoMode","synthetic":false,"types":[]}];
implementors["widestring"] = [{"text":"impl&lt;'a&gt; From&lt;UCString&lt;u16&gt;&gt; for Cow&lt;'a, UCStr&lt;u16&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;UCString&lt;u32&gt;&gt; for Cow&lt;'a, UCStr&lt;u32&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;UCString&lt;u16&gt;&gt; for OsString","synthetic":false,"types":[]},{"text":"impl From&lt;UCString&lt;u32&gt;&gt; for OsString","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; From&lt;UCString&lt;C&gt;&gt; for UString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, C:&nbsp;UChar, T:&nbsp;?Sized + AsRef&lt;UCStr&lt;C&gt;&gt;&gt; From&lt;&amp;'a T&gt; for UCString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a UCStr&lt;u16&gt;&gt; for Cow&lt;'a, UCStr&lt;u16&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a UCStr&lt;u32&gt;&gt; for Cow&lt;'a, UCStr&lt;u32&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, C:&nbsp;UChar&gt; From&lt;&amp;'a UCStr&lt;C&gt;&gt; for Box&lt;UCStr&lt;C&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; From&lt;Box&lt;UCStr&lt;C&gt;&gt;&gt; for UCString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; From&lt;UCString&lt;C&gt;&gt; for Box&lt;UCStr&lt;C&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;UString&lt;u16&gt;&gt; for Cow&lt;'a, UStr&lt;u16&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;UString&lt;u32&gt;&gt; for Cow&lt;'a, UStr&lt;u32&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for UString&lt;u16&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for UString&lt;u32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;OsString&gt; for UString&lt;u16&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;OsString&gt; for UString&lt;u32&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;UString&lt;u16&gt;&gt; for OsString","synthetic":false,"types":[]},{"text":"impl From&lt;UString&lt;u32&gt;&gt; for OsString","synthetic":false,"types":[]},{"text":"impl&lt;'a, C:&nbsp;UChar, T:&nbsp;?Sized + AsRef&lt;UStr&lt;C&gt;&gt;&gt; From&lt;&amp;'a T&gt; for UString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a UStr&lt;u16&gt;&gt; for Cow&lt;'a, UStr&lt;u16&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a UStr&lt;u32&gt;&gt; for Cow&lt;'a, UStr&lt;u32&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, C:&nbsp;UChar&gt; From&lt;&amp;'a UStr&lt;C&gt;&gt; for Box&lt;UStr&lt;C&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; From&lt;Box&lt;UStr&lt;C&gt;&gt;&gt; for UString&lt;C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;UChar&gt; From&lt;UString&lt;C&gt;&gt; for Box&lt;UStr&lt;C&gt;&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()